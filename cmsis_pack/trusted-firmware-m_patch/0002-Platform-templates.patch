From: Robert Rostohar <Robert.Rostohar@arm.com>
Date: Mon, 21 Dec 2020 12:09:54 +0100
Subject: [PATCH] Split Platform templates

Split templates to match the APIs:
 - add boot_seed.c (extracted from attest_hal.c, API: tfm_plat_boot_seed.h)
 - add device_id.c (extracted from attest_hal.c, API: tfm_plat_device_id.h)
 - update attest_hal.c (remove Boot Seed and Device ID, API: tfm_attest_hal.h)
---
 platform/ext/common/template/attest_hal.c | 93 -----------------------
 platform/ext/common/template/boot_seed.c  | 44 +++++++++++
 platform/ext/common/template/device_id.c  | 66 ++++++++++++++++
 3 files changed, 110 insertions(+), 93 deletions(-)
 create mode 100644 platform/ext/common/template/boot_seed.c
 create mode 100644 platform/ext/common/template/device_id.c

diff --git a/platform/ext/common/template/attest_hal.c b/platform/ext/common/template/attest_hal.c
index 69bafddd..97e21baf 100644
--- a/platform/ext/common/template/attest_hal.c
+++ b/platform/ext/common/template/attest_hal.c
@@ -5,23 +5,7 @@
  *
  */
 
-#include <stddef.h>
-#include <stdint.h>
 #include "tfm_attest_hal.h"
-#include "tfm_plat_boot_seed.h"
-#include "tfm_plat_device_id.h"
-
-/*!
- * \def BOOT_SEED
- *
- * \brief Fixed value for boot seed used for test.
- */
-#define BOOT_SEED   0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, \
-                    0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, \
-                    0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, \
-                    0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF
-
-static const uint8_t boot_seed[BOOT_SEED_SIZE] = {BOOT_SEED};
 
 /* Example verification service URL for initial attestation token */
 static const char verification_service_url[] = "www.trustedfirmware.org";
@@ -29,15 +13,6 @@ static const char verification_service_url[] = "www.trustedfirmware.org";
 /* Example profile definition document for initial attestation token */
 static const char attestation_profile_definition[] = "PSA_IOT_PROFILE_1";
 
-static const uint8_t implementation_id[] = {
-    0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
-    0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,
-    0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
-    0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
-};
-
-static const uint8_t example_ean_13[] = "060456527282910010";
-
 enum tfm_security_lifecycle_t tfm_attest_hal_get_security_lifecycle(void)
 {
     return TFM_SLC_SECURED;
@@ -58,71 +33,3 @@ tfm_attest_hal_get_profile_definition(uint32_t *size)
 
     return attestation_profile_definition;
 }
-
-/**
- * \brief Copy data in source buffer to the destination buffer
- *
- * \param[out]  p_dst  Pointer to destation buffer
- * \param[in]   p_src  Pointer to source buffer
- * \param[in]   size   Length of data to be copied
- */
-static inline void copy_buf(uint8_t *p_dst, const uint8_t *p_src, size_t size)
-{
-    uint32_t i;
-
-    for (i = size; i > 0; i--) {
-        *p_dst = *p_src;
-        p_src++;
-        p_dst++;
-    }
-}
-
-enum tfm_plat_err_t tfm_plat_get_boot_seed(uint32_t size, uint8_t *buf)
-{
-    /* FixMe: - This getter function must be ported per target platform.
-     *        - Platform service shall provide an API to further interact this
-     *          getter function to retrieve the boot seed.
-     */
-
-    uint8_t *p_dst = buf;
-    const uint8_t *p_src = boot_seed;
-
-    if (size != BOOT_SEED_SIZE) {
-        return TFM_PLAT_ERR_SYSTEM_ERR;
-    }
-
-    copy_buf(p_dst, p_src, size);
-
-    return TFM_PLAT_ERR_SUCCESS;
-}
-
-enum tfm_plat_err_t tfm_plat_get_implementation_id(uint32_t *size,
-                                                   uint8_t  *buf)
-{
-    const uint8_t *p_impl_id = implementation_id;
-    uint32_t impl_id_size = sizeof(implementation_id);
-
-    if (*size < impl_id_size) {
-        return TFM_PLAT_ERR_SYSTEM_ERR;
-    }
-
-    copy_buf(buf, p_impl_id, impl_id_size);
-    *size = impl_id_size;
-
-    return TFM_PLAT_ERR_SUCCESS;
-}
-
-enum tfm_plat_err_t tfm_plat_get_hw_version(uint32_t *size, uint8_t *buf)
-{
-    const uint8_t *p_hw_version = example_ean_13;
-    uint32_t hw_version_size = sizeof(example_ean_13) - 1;
-
-    if (*size < hw_version_size) {
-        return TFM_PLAT_ERR_SYSTEM_ERR;
-    }
-
-    copy_buf(buf, p_hw_version, hw_version_size);
-    *size = hw_version_size;
-
-    return TFM_PLAT_ERR_SUCCESS;
-}
diff --git a/platform/ext/common/template/boot_seed.c b/platform/ext/common/template/boot_seed.c
new file mode 100644
index 00000000..41b98a1e
--- /dev/null
+++ b/platform/ext/common/template/boot_seed.c
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2018-2020, Arm Limited. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ */
+
+#include "tfm_plat_boot_seed.h"
+
+/*!
+ * \def BOOT_SEED
+ *
+ * \brief Fixed value for boot seed used for test.
+ */
+#define BOOT_SEED   0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, \
+                    0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, \
+                    0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, \
+                    0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF
+
+static const uint8_t boot_seed[BOOT_SEED_SIZE] = {BOOT_SEED};
+
+enum tfm_plat_err_t tfm_plat_get_boot_seed(uint32_t size, uint8_t *buf)
+{
+    /* FixMe: - This getter function must be ported per target platform.
+     *        - Platform service shall provide an API to further interact this
+     *          getter function to retrieve the boot seed.
+     */
+
+    uint32_t i;
+    uint8_t *p_dst = buf;
+    const uint8_t *p_src = boot_seed;
+
+    if (size != BOOT_SEED_SIZE) {
+        return TFM_PLAT_ERR_SYSTEM_ERR;
+    }
+
+    for (i = size; i > 0; i--) {
+        *p_dst = *p_src;
+        p_src++;
+        p_dst++;
+    }
+
+    return TFM_PLAT_ERR_SUCCESS;
+}
diff --git a/platform/ext/common/template/device_id.c b/platform/ext/common/template/device_id.c
new file mode 100644
index 00000000..622b2231
--- /dev/null
+++ b/platform/ext/common/template/device_id.c
@@ -0,0 +1,66 @@
+/*
+ * Copyright (c) 2018-2020, Arm Limited. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ */
+
+#include <stddef.h>
+#include "tfm_plat_device_id.h"
+
+static const uint8_t implementation_id[] = {
+    0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
+    0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB,
+    0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
+    0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
+};
+
+static const uint8_t example_ean_13[] = "060456527282910010";
+/**
+ * \brief Copy the device specific ID to the destination buffer
+ *
+ * \param[out]  p_dst  Pointer to buffer where to store ID
+ * \param[in]   p_src  Pointer to the ID
+ * \param[in]   size   Length of the ID
+ */
+static inline void copy_id(uint8_t *p_dst, const uint8_t *p_src, size_t size)
+{
+    uint32_t i;
+
+    for (i = size; i > 0; i--) {
+        *p_dst = *p_src;
+        p_src++;
+        p_dst++;
+    }
+}
+
+enum tfm_plat_err_t tfm_plat_get_implementation_id(uint32_t *size,
+                                                   uint8_t  *buf)
+{
+    const uint8_t *p_impl_id = implementation_id;
+    uint32_t impl_id_size = sizeof(implementation_id);
+
+    if (*size < impl_id_size) {
+        return TFM_PLAT_ERR_SYSTEM_ERR;
+    }
+
+    copy_id(buf, p_impl_id, impl_id_size);
+    *size = impl_id_size;
+
+    return TFM_PLAT_ERR_SUCCESS;
+}
+
+enum tfm_plat_err_t tfm_plat_get_hw_version(uint32_t *size, uint8_t *buf)
+{
+    const uint8_t *p_hw_version = example_ean_13;
+    uint32_t hw_version_size = sizeof(example_ean_13) - 1;
+
+    if (*size < hw_version_size) {
+        return TFM_PLAT_ERR_SYSTEM_ERR;
+    }
+
+    copy_id(buf, p_hw_version, hw_version_size);
+    *size = hw_version_size;
+
+    return TFM_PLAT_ERR_SUCCESS;
+}
-- 
